;;sibilant stair.sibilant > stair.js

(comment "extrude.js")
(assign print console.log) ;;(print "Hello")

(var container)
(var camera)
(var scene)
(var renderer)
(var controls)
(var info (document.createElement 'div))
(assign info.style.position 'absolute)
(assign info.style.top "10px")
(assign info.style.width "100%")
(assign info.style.textAlign 'center)
(assign info.style.color "#fff")
(assign info.style.link "#f80")
(assign info.innerHTML "<a href='http://threejs.org' target='_blank' rel='noopener'>three.js</a> webgl - geometry extrude shapes")

(assign renderer (new THREE.WebGLRenderer (hash antialias true)))
(renderer.setPixelRatio window.devicePixelRatio)
(var w-width 900) ;;(/ window.innerWidth 2)    800
(var w-height 635) ;;(/ window.innerHeight 2) 600
(renderer.setSize w-width w-height)
(assign renderer.shadowMap.enabled true)
(assign renderer.shadowMap.type THREE.PCFSoftShadowMap)

;; embed render into div: 
(.appendChild (document.getElementById "WebGLCanvas") renderer.domElement)
;; embed render into body towards fullscreen: 
;;(document.body.appendChild renderer.domElement)

(assign scene (new THREE.Scene))
;;(assign scene.background (new THREE.Color "rgb(222, 222, 222)")) ;;"0x222222"
(assign scene.background (new THREE.Color "rgb(255, 255, 255)"))
(assign camera (new THREE.PerspectiveCamera 45 (/ w-width w-height) 1 2000))
(camera.position.set 14 12 16)

;;(assign controls (new THREE.TrackballControls camera renderer.domElement))
(assign controls (new THREE.OrbitControls camera renderer.domElement))
(assign controls.minDistance 0.1)
(assign controls.maxDistance 1000)

(scene.add (new THREE.AmbientLight)) ;;"0x222222"

;; lights ------------------------------------------------------------
;; PointLight
;;(var light (new THREE.PointLight)) ;;"0xffffff"
;;(light.position.copy camera.position)
;;(scene.add light)

;; hemiLight
;;(var hemiLight (new THREE.HemisphereLight (new THREE.Color "rgb(255, 255, 255)") (new THREE.Color "rgb(255, 255, 255)") 0.6))
;;(hemiLight.color.setHSL 0.6 1 0.6)
;;(hemiLight.groundColor.setHSL 0.095 1 0.75)
;;(hemiLight.position.set 0 15 0)
;;(scene.add hemiLight)
;;(var hemiLightHelper (new THREE.HemisphereLightHelper hemiLight 10))
;;(scene.add hemiLightHelper)

;; dirLight
;;(var dirLight (new THREE.DirectionalLight (new THREE.Color "rgb(255, 255, 255)") 1))
;;(dirLight.color.setHSL 0.1 1 0.95)
;;(dirLight.position.set -1 5.75 1)
;;(dirLight.position.multiplyScalar 30)
;;(scene.add dirLight)
;;(assign dirLight.castShadow true)
;;(assign dirLight.shadow.mapSize.width 2048)
;;(assign dirLight.shadow.mapSize.height 2048)
;;(var d 5)
;;(assign dirLight.shadow.camera.left (* -1 d))
;;(assign dirLight.shadow.camera.right d)
;;(assign dirLight.shadow.camera.top d)
;;(assign dirLight.shadow.camera.bottom (* -1 d))
;;(assign dirLight.shadow.camera.far 3500)
;;(assign dirLight.shadow.bias -0.0001)
;;(var dirLightHeper (new THREE.DirectionalLightHelper dirLight 10))
;;(scene.add dirLightHeper)

;;spotLight
(var spotLight (new THREE.SpotLight (new THREE.Color "rgb(255, 255, 255)")))
(spotLight.position.set -40 60 10)
(assign spotLight.castShadow true)
(assign spotLight.shadow.mapSize.width 1024);; default is 512
(assign spotLight.shadow.mapSize.height 1024)
(scene.add spotLight)
;;(var spotLightHeper (new THREE.SpotLightHelper spotLight 10))
;;(scene.add spotLightHeper)

;; GUI controller
(var options (hash lengthStair 10 heightStair 8 widthStair 4 heightStep 0.6 depthStep 0.1 thicknessStep 0.15 thicknessStair 0.3
               heightStrin 0.1 widthStrin 0.2 color1 "#cda650" ifStrin true ifStrin2 true)) ;;(new THREE.Color "rgb(40, 120, 200)")

(var options1 (hash material "Lambert" reset (lambda () (reset-options)) download (lambda () (download-data)) loadFile (lambda () (.click ($ "#myInput"))) ifEdges false))

(def reset-options ()
  (assign options.lengthStair 10)
  (assign options.heightStair 8)
  (assign options.widthStair 4)
  (assign options.heightStep 0.6)
  (assign options.depthStep 0.1)
  (assign options.thicknessStep 0.1)
  (assign options.thicknessStair 0.3)
  (assign options.heightStrin 0.1)
  (assign options.widthStrin 0.2)
  (assign options.color1 "#cda650") ;;"#2878C8" "#e3bd63"
  (assign options.ifStrin true)
  (assign options.ifStrin2 true)
  (assign options1.material "Lambert")
  (assign options1.ifEdges false)
  (camera.position.set 14 12 16)
  )

(var options-temp (jQuery.extend true (hash) options))
(def update-options (txt)
  (var textInput ($.csv.toObjects txt))
  (assign textInput (get textInput 0))
  (assign options.lengthStair (Number textInput.lengthStair))
  (assign options.heightStair (Number textInput.heightStair))
  (assign options.widthStair (Number textInput.widthStair))
  (assign options.heightStep (Number textInput.heightStep))
  (assign options.depthStep (Number textInput.depthStep))
  (assign options.thicknessStep (Number textInput.thicknessStep))
  (assign options.thicknessStair (Number textInput.thicknessStair))
  (assign options.heightStrin (Number textInput.heightStrin))
  (assign options.widthStrin (Number textInput.widthStrin))
  (assign options.color1 textInput.color1)
  (assign options.ifStrin (= textInput.ifStrin "true"))
  (assign options.ifStrin2 (= textInput.ifStrin2 "true"))
  (assign options-temp (jQuery.extend true (hash) options))
  )

(def read-options-temp ()  
  (assign options.lengthStair options-temp.lengthStair)
  (assign options.heightStair options-temp.heightStair)
  (assign options.widthStair options-temp.widthStair)
  (assign options.heightStep options-temp.heightStep)
  (assign options.depthStep options-temp.depthStep)
  (assign options.thicknessStep options-temp.thicknessStep)
  (assign options.thicknessStair options-temp.thicknessStair)
  (assign options.heightStrin options-temp.heightStrin)
  (assign options.widthStrin options-temp.widthStrin)
  (assign options.color1 options-temp.color1)
  (assign options.ifStrin options-temp.ifStrin)
  (assign options.ifStrin2 options-temp.ifStrin2)
  ;;(console.log "read-options-temp: " options)
  )

(def download-data ()
  (var keys (Object.keys options))
  (var index keys.length)
  (var rows (list (keys.splice 0 index) (.splice (Object.values options) 0 index)))
  (var csvContent "data:text/csv;charset=utf-8,")
  (rows.forEach
    (lambda (rowArray)
      (var row (rowArray.join ","))
      (assign csvContent (+ csvContent row "\r\n"))))
  (var encodedUri (encodeURI csvContent))
  (var link (document.createElement "a"))
  (link.setAttribute "href" encodedUri)
  (link.setAttribute "download" "my_data.csv")
  ;;(assign link.innerHTML "Click Here to download")
  ;;(document.body.appendChild link) ;;Required for FF
  (link.click)
  ) 

(var gui (new dat.GUI (hash autoPlace false)))
(.appendChild (document.getElementById "gui") gui.domElement)
(var size (gui.addFolder "Stair"))
;;(.listen (.name (.step (.max (.min (size.add options 'lengthStair) 2) 30) 1) "length")) ;;.listen can not input value but only adjust the slider
(.listen (.name (size.add options 'lengthStair 2 30) "Length"))
(.listen (.name (size.add options 'heightStair 2 30) "Height"))
(.listen (.name (size.add options 'widthStair 0.1 30) "Width"))
(.listen (.name (size.add options 'thicknessStair 0.1 options.heightStair) "Thickness"))
(size.open)
(var steps (gui.addFolder "Steps"))
(.listen (.name (steps.add options 'heightStep 0.1 2) "Height"))
(.listen (.name (steps.add options 'depthStep 0 options.heightStep) "Depth"))
(.listen (.name (steps.add options 'thicknessStep 0.05 options.heightStep) "Thickness"))
(steps.open)
(var size-strin (gui.addFolder "String"))
(.listen (.name (size-strin.add options 'heightStrin 0.1 options.heightStep) "Height"))
(.listen (.name (size-strin.add options 'widthStrin 0.1 (/ options.widthStair 2)) "Width"))
(.listen (.name (size-strin.add options 'ifStrin2) "Left?"))
(.listen (.name (size-strin.add options 'ifStrin) "Right?"))
(size-strin.open)
(var materials (gui.addFolder "Materials"))
(.listen (.name (materials.addColor options 'color1) "Colour"))
(.listen (.name (materials.add options1 'ifEdges) "Edges?"))
(.listen (.name (materials.add options1 'material (list "Basic" "Lambert" "Phong" "Wireframe")) "Material"))
(materials.open)
(var others (gui.addFolder "Others"))
(.listen (.name (others.add options1 'download) "Download"))
(.listen (.name (others.add options1 'reset) "Reset"))
(.listen (.name (others.add options1 'loadFile) "Upload"))
(others.open)

;; axes 
(var axes (new THREE.AxesHelper 10))
(scene.add axes)

;; plane
;;(var planeGeometry (new THREE.PlaneGeometry 60 20 1 1))
;;(var planeMaterial (new THREE.MeshLambertMaterial (hash color (new THREE.Color "rgb(120, 120, 200)"))))
;;(var plane (new THREE.Mesh planeGeometry planeMaterial))
;;(assign plane.rotation.x (/ Math.PI -2))
;;(assign plane.receiveShadow true)
;;(scene.add plane)

;; cube
;;(var cubeGeometry (new THREE.CubeGeometry 4 4 4))
;;(var cubeMaterial (new THREE.MeshLambertMaterial (hash color options.color1)))
;;(var cube (new THREE.Mesh cubeGeometry cubeMaterial))
;;(assign cube.castShadow true)
;;(assign cube.receiveShadow true)
;;(cube.position.set -2 11 0)
;;(scene.add cube)

;; make stair shapes
(def make-shape ()
  (var len (Math.round (/ options.heightStair options.heightStep)))
  (assign options.heightStep (/ options.heightStair len))
  (var ys_ (_.range 0 options.heightStair options.heightStep))
  (ys_.push options.heightStair)
  (var unit_length (/ options.lengthStair len))
  (var xs (Array))
  (var ys (Array))
  
  (ys.push 0)
  (var i_step len)
  (while (>= i_step 0)
    (when (> i_step 0)
      (var x (* unit_length i_step))
      (xs.push x)
      (xs.push x)
      (xs.push (+ x options.depthStep))
      (xs.push (+ x options.depthStep)))
    (when (< i_step len)
      (var y (get ys_ (- len i_step)))
      (ys.push (- y options.thicknessStep))
      (ys.push (- y options.thicknessStep))
      (ys.push y)
      (ys.push y))
    (decr i_step))
  (xs.push 0)
  ;;(console.log "xs: " xs)
  ;;(console.log "ys: " ys)

  ;;(assign options.thicknessStair (Math.min options.heightStair options.thicknessStair))
  (var h-bottom0 (- options.heightStair options.thicknessStair))
  (var w-bottom1 (* (/ options.lengthStair options.heightStair) h-bottom0))
  ;;(console.log "h-bottom0: " h-bottom0  "  w-bottom1: " w-bottom1 )

  (var pts (list))
  (pts.push (new THREE.Vector2 0 h-bottom0))
  
  (var i-segments (- xs.length 1))
  (while (>= i-segments 0)
    (var x (get xs i-segments))
    (var y (get ys i-segments))
    (pts.push (new THREE.Vector2 x y))
    (decr i-segments))
  
  (pts.push (new THREE.Vector2 w-bottom1 0)) ;;(each v pts (console.log v))
  (var shape (new THREE.Shape pts))

  ;; shape-strin 
  (var vec-pts-strin [
    [0 h-bottom0] [w-bottom1 0]
    [(get xs 3) 0]
    [(get xs 3) (+ (get ys 3) options.heightStrin)]
    [(get xs (- xs.length 2)) (+ (get ys (- ys.length 2)) options.heightStrin)]
    [0 (+ (get ys (- ys.length 1)) options.heightStrin)]])
  ;;(console.log "vec-pts-strin: " vec-pts-strin)
  (var pts-strin (list))
  (each vec vec-pts-strin (pts-strin.push (new THREE.Vector2 (get vec 0) (get vec 1))))
  (var shape-strin (new THREE.Shape pts-strin))
  
  (hash 'shape shape 'shape-strin shape-strin))

(def set-material ()
  (switch options1.material
    ("Basic" (new THREE.MeshBasicMaterial (hash color (new THREE.Color options.color1))))
    ("Lambert" (new THREE.MeshLambertMaterial (hash color (new THREE.Color options.color1))))
    ("Phong" (new THREE.MeshPhongMaterial (hash color (new THREE.Color options.color1))))
    ;;("Wireframe" (new THREE.MeshBasicMaterial (hash color (new THREE.Color options.color1) wireframe true)))
    ("Wireframe" (assign options1.ifEdges true) (new THREE.MeshLambertMaterial (hash color (new THREE.Color options.color1) transparent true opacity 0.3)))    
    (default (new THREE.MeshLambertMaterial (hash color (new THREE.Color options.color1))))
    ))

(var shapes (make-shape))
(var shape (get shapes 'shape))
(var shape-strin (get shapes 'shape-strin))

(var extrudeSettings
  (hash
    steps 1
    amount options.widthStair
    bevelEnabled false
    bevelThickness 0
    bevelSize 0
    bevelSegments 1))

(var geometry (new THREE.ExtrudeGeometry shape extrudeSettings ))
;; DO NOT use pure color such as "rgb(255, 0, 0)"
;;(var material (new THREE.MeshLambertMaterial (hash color (new THREE.Color "skyblue") wireframe false)))
;;(var material (new THREE.MeshLambertMaterial (hash color (new THREE.Color "rgb(40, 120, 200)"))))
(var material (set-material))
(var mesh (new THREE.Mesh geometry material))

(def add-edges (mesh)
  (var eGeometry (new THREE.EdgesGeometry mesh.geometry))
  (var eMaterial (new THREE.LineBasicMaterial (hash color (new THREE.Color "rgb(0, 0, 0)") linewidth 1)))
  (var edges (new THREE.LineSegments eGeometry eMaterial))
  (mesh.add edges))

(assign mesh.castShadow true)
(assign mesh.receiveShadow true)
(scene.add mesh)

;; mesh-strin -----------------------------------------------------------------
(var strin-extrudeSettings
  (hash
    steps 1
    amount options.widthStrin
    bevelEnabled false
    bevelThickness 0
    bevelSize 0
    bevelSegments 1))

(var strin-geometry (new THREE.ExtrudeGeometry shape-strin strin-extrudeSettings))
;; DO NOT use pure color such as "rgb(255, 0, 0)"
(var strin-material (new THREE.MeshLambertMaterial (hash color (new THREE.Color "rgb(40, 120, 200)"))))
(var mesh-strin (new THREE.Mesh strin-geometry strin-material))
(mesh-strin.position.set 0 0 (* -1 options.widthStrin))
(assign mesh-strin.castShadow true)
(assign mesh-strin.receiveShadow true)
(scene.add mesh-strin)
(var has-mesh-strin true)

(var mesh-strin2 (new THREE.Mesh strin-geometry strin-material))
(mesh-strin.position.set 0 0 options.widthStair)
(assign mesh-strin2.castShadow true)
(assign mesh-strin2.receiveShadow true)
(scene.add mesh-strin2)
(var has-mesh-strin2 true)

(def animate ()
  (requestAnimationFrame animate)
  (controls.update)
  (renderer.render scene camera)
  ;; slider stair
  (var slider-depthStep (get steps.__controllers 1))
  (var slider-thicknessStep (get steps.__controllers 2))
  (var slider-thicknessStair (get size.__controllers 3))
  (assign slider-thicknessStair.__max options.heightStair) ;; change the max thread of thicknessStair to heightStair timely
  (assign slider-thicknessStep.__max options.heightStep)
  (assign slider-depthStep.__max options.heightStep)

  ;;(assign material (new THREE.MeshLambertMaterial (hash color options.color1)))
  (assign material (set-material))
  (assign shapes (make-shape))
  (assign shape (get shapes 'shape))
  
  ;; stair
  (assign geometry (new THREE.ExtrudeGeometry shape extrudeSettings))  
  (scene.remove mesh)
  (assign mesh (new THREE.Mesh geometry material))

  (if options1.ifEdges
    (add-edges mesh))
  
  (scene.add mesh)
  ;; stair width
  (assign extrudeSettings.amount options.widthStair)

  (if (or options.ifStrin options.ifStrin2)
    (do
      ;; slider strin
      (var slider-heightStrin (get size-strin.__controllers 0))
      (var slider-widthStrin (get size-strin.__controllers 1))
      (assign slider-heightStrin.__max options.heightStep)
      (assign slider-widthStrin.__max (/ options.widthStair 2))
      (assign shape-strin (get shapes 'shape-strin))
      (assign strin-material (set-material))
      ;; strin
      (assign strin-geometry (new THREE.ExtrudeGeometry shape-strin strin-extrudeSettings))
      (if options.ifStrin
        (do
          (if has-mesh-strin (do (scene.remove mesh-strin) (assign has-mesh-strin false)))
          (assign mesh-strin (new THREE.Mesh strin-geometry strin-material))
          (mesh-strin.position.set 0 0 (* -1 options.widthStrin))
          (if options1.ifEdges (add-edges mesh-strin))
          (scene.add mesh-strin) (assign has-mesh-strin true))
        (if has-mesh-strin (do (scene.remove mesh-strin) (assign has-mesh-strin false))))
      (if options.ifStrin2
        (do
          (if has-mesh-strin2 (do (scene.remove mesh-strin2) (assign has-mesh-strin2 false)))
          (assign mesh-strin2 (new THREE.Mesh strin-geometry strin-material))
          (mesh-strin2.position.set 0 0 options.widthStair)
          (if options1.ifEdges (add-edges mesh-strin2))
          (scene.add mesh-strin2) (assign has-mesh-strin2 true))
        (if has-mesh-strin2 (do (scene.remove mesh-strin2) (assign has-mesh-strin2 false))))      
      ;; strin width
      (assign strin-extrudeSettings.amount options.widthStrin))
    (do
      (if has-mesh-strin (do (scene.remove mesh-strin) (assign has-mesh-strin false)))
      (if has-mesh-strin2 (do (scene.remove mesh-strin2) (assign has-mesh-strin2 false))))))
(animate)
